// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  files         File[]
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model File {
  id         String    @id @default(cuid()) @map("_id")
  name       String
  url        String?
  embed      Boolean?  @default(false)
  user_id    String
  user       User      @relation(fields: [user_id], references: [id])
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  messages   Message[]
  note       Notes[]
  summary    String?
}

model Message {
  id         String    @id @default(cuid()) @map("_id")
  text       String
  sequence   Int
  type       String?
  file_id    String
  file       File      @relation(fields: [file_id], references: [id])
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
}

model Notes {
  id         String    @id @default(cuid()) @map("_id")
  content    String
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  file_id    String
  file       File      @relation(fields: [file_id], references: [id])
}
